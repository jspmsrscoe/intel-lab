{
  "cells": [
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "DFaOiHzA0ekU"
      },
      "outputs": [],
      "source": [
        "import pandas as pd\n",
        "from mlxtend.frequent_patterns import apriori, association_rules\n",
        "from mlxtend.preprocessing import TransactionEncoder"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 3,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "RkSPer1q9A8d",
        "outputId": "4313f6bd-6fdc-4877-f8df-a97aa8cf2bb8"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "--- Raw Data Sample (first 5 rows) ---\n",
            "              0          1           2                 3             4   \\\n",
            "0         shrimp    almonds     avocado    vegetables mix  green grapes   \n",
            "1        burgers  meatballs        eggs               NaN           NaN   \n",
            "2        chutney        NaN         NaN               NaN           NaN   \n",
            "3         turkey    avocado         NaN               NaN           NaN   \n",
            "4  mineral water       milk  energy bar  whole wheat rice     green tea   \n",
            "\n",
            "                 5     6               7             8             9   \\\n",
            "0  whole weat flour  yams  cottage cheese  energy drink  tomato juice   \n",
            "1               NaN   NaN             NaN           NaN           NaN   \n",
            "2               NaN   NaN             NaN           NaN           NaN   \n",
            "3               NaN   NaN             NaN           NaN           NaN   \n",
            "4               NaN   NaN             NaN           NaN           NaN   \n",
            "\n",
            "               10         11     12     13             14      15  \\\n",
            "0  low fat yogurt  green tea  honey  salad  mineral water  salmon   \n",
            "1             NaN        NaN    NaN    NaN            NaN     NaN   \n",
            "2             NaN        NaN    NaN    NaN            NaN     NaN   \n",
            "3             NaN        NaN    NaN    NaN            NaN     NaN   \n",
            "4             NaN        NaN    NaN    NaN            NaN     NaN   \n",
            "\n",
            "                  16               17       18         19  \n",
            "0  antioxydant juice  frozen smoothie  spinach  olive oil  \n",
            "1                NaN              NaN      NaN        NaN  \n",
            "2                NaN              NaN      NaN        NaN  \n",
            "3                NaN              NaN      NaN        NaN  \n",
            "4                NaN              NaN      NaN        NaN  \n"
          ]
        }
      ],
      "source": [
        "# 1. Load the dataset\n",
        "# The dataset has no headers, so we specify header=None.\n",
        "df = pd.read_csv('Market_Basket_Optimisation.csv', header=None)\n",
        "print(\"--- Raw Data Sample (first 5 rows) ---\")\n",
        "print(df.head())"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 4,
      "metadata": {
        "id": "ydftmGMz9Bo2"
      },
      "outputs": [],
      "source": [
        "# 2. Preprocess the data into a list of transactions\n",
        "# The TransactionEncoder expects a list of lists.\n",
        "# We iterate over each row of the DataFrame and create a list of items,\n",
        "# dropping the 'NaN' values which signify no item was purchased.\n",
        "transactions = []\n",
        "for i in range(len(df)):\n",
        "    transactions.append([str(item) for item in df.iloc[i].dropna()])"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 5,
      "metadata": {
        "id": "260be6e6"
      },
      "outputs": [],
      "source": [
        "# 3. Transform the data into a one-hot encoded DataFrame\n",
        "te = TransactionEncoder()\n",
        "te_ary = te.fit(transactions).transform(transactions)\n",
        "onehot_df = pd.DataFrame(te_ary, columns=te.columns_)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 6,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "179ff840",
        "outputId": "5d09acbc-df52-4d0a-c13c-14a5948ecf5b"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "--- Frequent Itemsets (Support >= 0.03) ---\n",
            "     support                            itemsets\n",
            "25  0.238368                     (mineral water)\n",
            "11  0.179709                              (eggs)\n",
            "31  0.174110                         (spaghetti)\n",
            "13  0.170911                      (french fries)\n",
            "7   0.163845                         (chocolate)\n",
            "18  0.132116                         (green tea)\n",
            "24  0.129583                              (milk)\n",
            "19  0.098254                       (ground beef)\n",
            "16  0.095321                 (frozen vegetables)\n",
            "27  0.095054                          (pancakes)\n",
            "2   0.087188                           (burgers)\n",
            "4   0.081056                              (cake)\n",
            "8   0.080389                           (cookies)\n",
            "12  0.079323                          (escalope)\n",
            "23  0.076523                    (low fat yogurt)\n",
            "29  0.071457                            (shrimp)\n",
            "33  0.068391                          (tomatoes)\n",
            "26  0.065858                         (olive oil)\n",
            "15  0.063325                   (frozen smoothie)\n",
            "34  0.062525                            (turkey)\n",
            "6   0.059992                           (chicken)\n",
            "53  0.059725          (spaghetti, mineral water)\n",
            "35  0.058526                  (whole wheat rice)\n",
            "39  0.052660          (chocolate, mineral water)\n",
            "17  0.052393                     (grated cheese)\n",
            "9   0.051060                       (cooking oil)\n",
            "43  0.050927               (eggs, mineral water)\n",
            "30  0.050527                              (soup)\n",
            "20  0.049460                     (herb & pepper)\n",
            "50  0.047994               (milk, mineral water)\n",
            "21  0.047460                             (honey)\n",
            "5   0.046794                         (champagne)\n",
            "14  0.043061                       (fresh bread)\n",
            "28  0.042528                            (salmon)\n",
            "48  0.040928        (ground beef, mineral water)\n",
            "49  0.039195            (spaghetti, ground beef)\n",
            "40  0.039195              (chocolate, spaghetti)\n",
            "44  0.036528                   (eggs, spaghetti)\n",
            "41  0.036395                (french fries, eggs)\n",
            "46  0.035729  (frozen vegetables, mineral water)\n",
            "51  0.035462                   (spaghetti, milk)\n",
            "37  0.034395           (french fries, chocolate)\n",
            "52  0.033729           (pancakes, mineral water)\n",
            "45  0.033729       (french fries, mineral water)\n",
            "1   0.033729                          (brownies)\n",
            "0   0.033329                           (avocado)\n",
            "36  0.033196                   (eggs, chocolate)\n",
            "22  0.032396                          (hot dogs)\n",
            "38  0.032129                   (chocolate, milk)\n",
            "10  0.031862                    (cottage cheese)\n",
            "47  0.031063          (green tea, mineral water)\n",
            "42  0.030796                        (eggs, milk)\n",
            "32  0.030396                      (tomato juice)\n",
            "3   0.030129                            (butter)\n"
          ]
        }
      ],
      "source": [
        "# 4. Find frequent itemsets using Apriori\n",
        "# Real-world datasets are sparse. We must use a low support threshold.\n",
        "# Let's find itemsets that appear in at least 3% of the transactions.\n",
        "frequent_itemsets = apriori(onehot_df, min_support=0.03, use_colnames=True)\n",
        "print(\"\\n--- Frequent Itemsets (Support >= 0.03) ---\")\n",
        "print(frequent_itemsets.sort_values(by='support', ascending=False))"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 7,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "03rGd3efBWKe",
        "outputId": "6b8bf216-d195-4fab-c619-6b72a68d2818"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "--- Association Rules (Lift >= 1.2) ---\n",
            "            antecedents      consequents  antecedent support  \\\n",
            "12        (ground beef)  (mineral water)            0.098254   \n",
            "15        (ground beef)      (spaghetti)            0.098254   \n",
            "10  (frozen vegetables)  (mineral water)            0.095321   \n",
            "16               (milk)  (mineral water)            0.129583   \n",
            "20           (pancakes)  (mineral water)            0.095054   \n",
            "22          (spaghetti)  (mineral water)            0.174110   \n",
            "4           (chocolate)  (mineral water)            0.163845   \n",
            "19               (milk)      (spaghetti)            0.129583   \n",
            "23      (mineral water)      (spaghetti)            0.238368   \n",
            "3                (milk)      (chocolate)            0.129583   \n",
            "\n",
            "    consequent support   support  confidence      lift  representativity  \\\n",
            "12            0.238368  0.040928    0.416554  1.747522               1.0   \n",
            "15            0.174110  0.039195    0.398915  2.291162               1.0   \n",
            "10            0.238368  0.035729    0.374825  1.572463               1.0   \n",
            "16            0.238368  0.047994    0.370370  1.553774               1.0   \n",
            "20            0.238368  0.033729    0.354839  1.488616               1.0   \n",
            "22            0.238368  0.059725    0.343032  1.439085               1.0   \n",
            "4             0.238368  0.052660    0.321400  1.348332               1.0   \n",
            "19            0.174110  0.035462    0.273663  1.571779               1.0   \n",
            "23            0.174110  0.059725    0.250559  1.439085               1.0   \n",
            "3             0.163845  0.032129    0.247942  1.513276               1.0   \n",
            "\n",
            "    leverage  conviction  zhangs_metric   jaccard  certainty  kulczynski  \n",
            "12  0.017507    1.305401       0.474369  0.138413   0.233952    0.294127  \n",
            "15  0.022088    1.373997       0.624943  0.168096   0.272197    0.312015  \n",
            "10  0.013007    1.218270       0.402413  0.119911   0.179164    0.262357  \n",
            "16  0.017105    1.209650       0.409465  0.150000   0.173315    0.285856  \n",
            "20  0.011071    1.180529       0.362712  0.112544   0.152922    0.248169  \n",
            "22  0.018223    1.159314       0.369437  0.169312   0.137421    0.296796  \n",
            "4   0.013604    1.122357       0.308965  0.150648   0.109018    0.271158  \n",
            "19  0.012900    1.137061       0.417935  0.132207   0.120540    0.238669  \n",
            "23  0.018223    1.102008       0.400606  0.169312   0.092566    0.296796  \n",
            "3   0.010898    1.111823       0.389677  0.122959   0.100577    0.222018  \n"
          ]
        }
      ],
      "source": [
        "\n",
        "# 5. Generate association rules\n",
        "# We'll look for rules with a lift greater than 1.2 and confidence > 0.2.\n",
        "# Lift > 1 indicates a positive correlation.\n",
        "rules = association_rules(frequent_itemsets, metric=\"lift\", min_threshold=1.2)\n",
        "\n",
        "print(\"\\n--- Association Rules (Lift >= 1.2) ---\")\n",
        "# Sort rules by confidence and lift for clarity\n",
        "print(rules.sort_values(by=['confidence', 'lift'], ascending=False).head(10))"
      ]
    }
  ],
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "display_name": ".venv (3.13.3)",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.13.3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}
